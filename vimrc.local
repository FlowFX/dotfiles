"   ____                           _
"  / ___| ___ _ __   ___ _ __ __ _| |
" | |  _ / _ \ '_ \ / _ \ '__/ _` | |
" | |_| |  __/ | | |  __/ | | (_| | |
"  \____|\___|_| |_|\___|_|  \__,_|_|
"
" General options
"
set number              " show current line number within relative number
set relativenumber

let maplocalleader = ','

" Sensible search
set ignorecase          " ignore case in searches
set smartcase           " respect case if search begins with a capital letter
set incsearch           " search as characters are entered
set hlsearch            " highlight matches

" Clear search highlighting
nnoremap <leader><space> :nohlsearch<CR>

" Easy escaping
inoremap jj <ESC>

" Show me where I am
set cursorline

" Auto-reload files if they change outside of Vim
set autoread

nmap <silent> ]t :tabnext<CR>
nmap <silent> [t :tabprevious<CR>

nnoremap <leader>s :smile<CR>

" Folding
nnoremap <leader>a za

"  _                _
" | |    ___   ___ | | __
" | |   / _ \ / _ \| |/ /
" | |__| (_) | (_) |   <
" |_____\___/ \___/|_|\_\
"
" Colorscheme
colorscheme smyck      " http://color.smyck.org/

" Give me the underlined cursorline back
hi CursorLine cterm=underline ctermbg=none
" Reduce brightness of wrapmargin indicator
hi ColorColumn cterm=none ctermbg=0


"  ___   _             _                             _
" |  _ \| |_   _  __ _(_)_ __     ___ ___  _ __  / _(_) __ _
" | |_) | | | | |/ _` | | '_ \   / __/ _ \| '_ \| |_| |/ _` |
" |  __/| | |_| | (_| | | | | | | (_| (_) | | | |  _| | (_| |
" |_|   |_|\__,_|\__, |_|_| |_|  \___\___/|_| |_|_| |_|\__, |
"                |___/                                 |___/
" Plugin-specific configuration options

""" TMUX NAVIGATOR
" https://github.com/christoomey/vim-tmux-navigator#custom-key-bindings
" tmux pane-aware custom key bindings
let g:tmux_navigator_no_mappings = 1

nnoremap <silent> <c-h> :TmuxNavigateLeft<cr>
nnoremap <silent> <c-j> :TmuxNavigateDown<cr>
nnoremap <silent> <c-k> :TmuxNavigateUp<cr>
nnoremap <silent> <c-l> :TmuxNavigateRight<cr>
nnoremap <silent> <c-;> :TmuxNavigatePrevious<cr>

""" ALE
" Auto-fix files on save
let g:ale_fix_on_save = 1
" But also give me a handy for when I need it
nmap <F8> <Plug>(ale_fix)

" use emojis for errors and warnings
let g:ale_sign_error = '✗'
let g:ale_sign_warning = '≫'

let g:ale_linters = {
\   'javascript': ['eslint'],
\   'ruby': ['rubocop'],
\}

let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\   'javascript': ['eslint'],
\   'ruby': ['rubocop'],
\}

" Mappings in the style of unimpaired-next
nmap <silent> [W <Plug>(ale_first)
nmap <silent> [w <Plug>(ale_previous)
nmap <silent> ]w <Plug>(ale_next)
nmap <silent> ]W <Plug>(ale_last)

""" NERDTREE
" Toggle NERDTree with Ctrl-n
map <silent> <C-n> :NERDTreeToggle<CR>

" close NERDTree after a file is opened
let g:NERDTreeQuitOnOpen=1

""" FZF
" Better FZF https://statico.github.io/vim3.html
nmap <C-p> :Files<CR>
nmap ; :Buffers<CR>

" make FZF respect gitignore if `ag` is installed
if (executable('ag'))
  let $FZF_DEFAULT_COMMAND = 'ag --hidden --ignore .git -g ""'
endif

let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-s': 'split',
  \ 'ctrl-v': 'vsplit' }

""" ACK & AG (The Silver Searcher) """
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif

cnoreabbrev Ack Ack1
nnoremap <LocalLeader>a :Ack!<Space>

""" VIM-TEST
" https://github.com/janko/vim-test
" make test commands execute using tslime.vim
let test#strategy = "tslime"
let test#ruby#use_spring_binstub = 1

" In Alternate File, :TestNearest executes :TestLast
nnoremap <silent> <CR>         :TestNearest<CR>
nnoremap <silent> <leader><CR> :TestFile<CR>
nnoremap <silent> <leader>l    :TestLast<CR>

""" VIM-SIGNIFY
let g:signify_vcs_list = [ 'git' ]
set signcolumn=yes

" Remove irritating background colors
hi DiffAdd    ctermbg=none ctermfg=2
hi DiffDelete ctermbg=none ctermfg=1
hi DiffChange ctermbg=none ctermfg=4
